class Solution {
    private int bfs(int n, List<List<Integer>> adjList) {
        Queue<Integer> q= new LinkedList<>();
        boolean[] marked= new boolean[n];
        q.add(0);
        marked[0] = true;
        int cCount= 1;
        int nCount = 0;
        int e= 0;
        while (!q.isEmpty()) {
            for (int i = 0; i < cCount; i++) {
                int currentNode = q.poll();
                if (currentNode == n - 1) {
                    return e; 
                }
                for (int x: adjList.get(currentNode)) {
                    if (marked[x])
                        continue;
                    q.add(x); 
                    nCount++; 
                    marked[x] = true;
                }
            }
            cCount= nCount;
            nCount = 0; 
            e++; 
        }
        return -1; 
    }
    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {
        List<Integer> res= new ArrayList<>();
        List<List<Integer>> list= new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            list.add(new ArrayList<>());
        }
        for (int i = 0; i < n - 1; i++) {
            list.get(i).add(i + 1);
        }
        for (int[] road : queries) {
            int u = road[0];
            int v = road[1];
            list.get(u).add(v); 
            res.add(bfs(n, list));
        }
        return res.stream().mapToInt(i -> i).toArray();
    }
}
